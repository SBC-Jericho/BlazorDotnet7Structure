@page "/chat"
@inject NavigationManager NavigationManager
@rendermode InteractiveWebAssembly

<h3>Chat</h3>

<MudCard>
    <MudCardContent>
@if (isConnected)
{
    
    <MudButton 
        OnClick="JoinGroup"
        Color="Color.Primary"
        Variant="Variant.Filled"
        ButtonType="ButtonType.Button">
        Join
    </MudButton>

            <select id="group" @bind="selectedOption">
                <option value="All">Everyone</option>
                <option value="MySelf">Myself</option>
                <option value="PrivateGroup">Private Group</option>

            </select>

            <p>You selected: @selectedOption</p>
    <MudTextField 
        Variant="Variant.Outlined"
        @bind-Value="messageInput" 
        Label="Message Input" 
    />

    <MudButton @onclick="Send" Variant="Variant.Filled">Send</MudButton>

    <MudList Id="messagesList">
        @foreach (var message in messages)
        {
            <MudListItem>@message
            </MudListItem>
        }
    </MudList>
}
else
{
    <span>Connecting....</span>

}
</MudCardContent>
</MudCard>
@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    private string selectedOption = "PrivateGroup";
    protected override async Task OnInitializedAsync() 
    {
        hubConnection = new HubConnectionBuilder()  
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string>("ReceivedMessage", (message) =>
        {
            var encodeMessage = $"{message}";
            messages.Add(encodeMessage);
            StateHasChanged();

        });

        await hubConnection.StartAsync();
    }

    async Task Send()
    {
        if (selectedOption == "PrivateGroup")
        {
            await hubConnection.SendAsync("SendMessageToGroup", "PrivateGroup", messageInput);

        }
        else 
        {
            await hubConnection.SendAsync("SendMessage", messageInput);

        } 
    } 


    public bool isConnected => hubConnection.State == HubConnectionState.Connected;

    async Task JoinGroup()
    {
         await hubConnection.SendAsync("AddGroup", "PrivateGroup");
    }
}
    